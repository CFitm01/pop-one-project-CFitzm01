# -*- coding: utf-8 -*-
"""
Created on Fri Nov  8 14:29:35 2019

@author: CFitz
"""
import math

file = open("city-data.txt", "r")
text_file = file.read()
text_file = text_file.replace("\n", "\t")

class RoadMap:
#generates a class instance RoadMap
    
    def __init__(self):
        self.roadmap = []
        #So far a dict isn't required but it may prove useful.
        #This is done as part of the print_cities function.
        self.capitols = dict()
    
    #this function sucessfully assigns the map to a class instance.
    def read_cities(self, text_file):
        locations = text_file.split("\t")
        for i in range(0, len(locations), 4):
            self.roadmap.append(tuple(locations[i:i+4]))
        return self.roadmap

    def print_cities(self):
        for i in range(len(self.roadmap)):
            City = self.roadmap[i][1]
            Lat = round(float(self.roadmap[i][2]),2)
            Lon = round(float(self.roadmap[i][3]),2)
            #The below will account for if errors are generated when
            #shifting cities.
            if City not in self.capitols:
                self.capitols[City] = (Lat, Lon)
            print(City + " " + "Lat: " + str(Lat) + " Lon: " + str(Lon))
            
            
            

def compute_total_distance(road_map):
    distance = 0
    for i in range(0, len(road_map)):
        x1 = float(road_map[i][2])
        y1 = float(road_map[i][3])
        if i <= 50:
            x2 = float(road_map[i+1][2])
            y2 = float(road_map[i+1][3])
            distance += abs(math.sqrt((x1-x2)) + sqrt((y1-y2)))
        else:
            x1 = float(road_map[-1][2])
            y1 = float(road_map[-1][3])
            x2 = float(road_map[0][2])
            y2 = float(road_map[0][3])
            distance += abs(math.sqrt((x1-x2)) + sqrt((y1-y2)))
    total_distance = distance
        

road_map = RoadMap()

road_map.read_cities(text_file)
road_map.print_cities()
