# -*- coding: utf-8 -*-
"""
Created on Tue Dec  3 20:21:04 2019

@author: CFitz
"""

import math
import random as rand
import numpy as py

#file = open("city-data.txt", "r")
file = open("Mock_cities.txt", "r")
text_file = file.read()
text_file = text_file.replace("\n", "\t")

class Salesman:
#generates a class instance RoadMap
    
    def __init__(self):
        self.count = 0
        self.iter = 0
        self.roadmap = []
        #So far a dict isn't required but it may prove useful.
        #This is done as part of the print_cities function.
        self.capitols = dict()
        self.best_distance = 0
        self.best_route = []
        
    
    #this function sucessfully assigns the map to a class instance.
    def read_cities(self, text_file):
        locations = text_file.split("\t")
        for i in range(0, len(locations), 4):
            self.roadmap.append(tuple(locations[i:i+4]))
        return road_map.print_cities()

    def print_cities(self):
        for i in range(len(self.roadmap)):
            City = self.roadmap[i][1]
            Lat = round(float(self.roadmap[i][2]),2)
            Lon = round(float(self.roadmap[i][3]),2)
            #The below will account for if errors are generated when
            #shifting cities.
            if City not in self.capitols:
                self.capitols[City] = (Lat, Lon)
            print(City + " " + "Lat: " + str(Lat) + " Lon: " + str(Lon))
        return road_map.compute_total_distance()
            
    def compute_total_distance(self):
        n = len(self.roadmap)-1
        current_distance = 0
        current_route = self.roadmap
        for i in range(len(self.roadmap)):
            x1 = float(self.roadmap[i][2])
            y1 = float(self.roadmap[i][3])
            #This if-statement prevents us from reaching an 'index out of range
            #error, and allows the journey to continue to the finale.
            if i != n:
                x2 = float(self.roadmap[i+1][2])
                y2 = float(self.roadmap[i+1][3])
                ans = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)
                current_distance += float(ans)
            else:
                x2 = float(self.roadmap[0][2])
                y2 = float(self.roadmap[0][3])
                ans = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)
                current_distance += round(float(ans),2)
        #This removes the need to place an arbitrary value of distance for the
        #route, otherwise the best route would always remain '0'
        if current_distance < self.best_distance or self.best_distance == 0:
            self.best_distance = current_distance
            self.best_route = current_route
        print("The current route is: " + str(current_distance)+ "\n" + \
                     "The best route is: " + str(self.best_distance))
        road_map.shift_cities()
        return road_map.swap_cities(rand.randint(1,len(self.roadmap)-1),\
                                    rand.randint(1,len(self.roadmap)-1))
                  
    def shift_cities(self):
        start = self.roadmap[-1]
        self.roadmap.pop()
        self.roadmap.insert(0, start)
        return self.roadmap
            
    def swap_cities(self, index1, index2):
        if index1 == index2:
            return self.roadmap
        else:
            self.roadmap[index1], self.roadmap[index2] = \
            self.roadmap[index2],self.roadmap[index1]
        self.count += 1
        if self.count < int(self.iter):
            return road_map.print_cities()
    
    def __main__(self):
        input("Please select your txt file.")
        iterations = input("Please select how many iterations you would like to\
                           run: ")
        self.iter = iterations
        road_map.read_cities(text_file)
        if self.count < int(self.iter):
            self.print_cities(self.roadmap)

        

road_map = Salesman()
#road_map.read_cities(text_file)
road_map.__main__()
